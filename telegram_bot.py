# telegram_bot.py
import os
import django

# –ø—É—Ç—å –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º Django-–ø—Ä–æ–µ–∫—Ç–∞
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'FinControl.settings')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
django.setup()
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
import re
from asgiref.sync import sync_to_async
from decouple import config
import matplotlib.pyplot as plt # <-- –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç matplotlib
import io # <-- –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç io –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–π—Ç–∞–º–∏
import tempfile # <-- –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç tempfile –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ Django
from django.contrib.auth.models import User
from django.conf import settings
from django.db.models import Sum, Q # –î–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ (—Å—É–º–º—ã) –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
from finance.models import Transaction, Category, UserConsent

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ —Ñ–∞–π–ª–∞ .env)
BOT_TOKEN = config('BOT_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –º–µ—Å—è—Ü–∞, –Ω–µ–¥–µ–ª–∏ –∏ –¥–Ω—è
class MonthInput(StatesGroup):
    waiting_for_month = State()

class DayInput(StatesGroup):
    waiting_for_day = State()

class WeekInput(StatesGroup):
    waiting_for_week_start = State()

# –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ FSM (Finite State Machine)
class TransactionStates(StatesGroup):
    waiting_for_type = State()
    waiting_for_amount = State()
    waiting_for_date = State()
    waiting_for_category = State()
    waiting_for_description = State()

# –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç
def parse_day(date_str: str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ '21.10.2025' ‚Üí date(2025, 10, 21)"""
    return datetime.strptime(date_str, '%d.%m.%Y').date()

def parse_month(month_str: str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ '10.2025' ‚Üí (start_date, end_date) –º–µ—Å—è—Ü–∞"""
    parts = month_str.split('.')
    if len(parts) != 2:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞")
    month, year = int(parts[0]), int(parts[1])
    if not (1 <= month <= 12):
        raise ValueError("–ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 01 –¥–æ 12")
    start = datetime(year, month, 1).date()
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    if month == 12:
        end = datetime(year + 1, 1, 1).date() - timedelta(days=1)
    else:
        end = datetime(year, month + 1, 1).date() - timedelta(days=1)
    return start, end

def parse_year(year_str: str):
    """–ü–∞—Ä—Å–∏—Ç '2025' ‚Üí (start_date, end_date) –≥–æ–¥–∞"""
    year = int(year_str)
    start = datetime(year, 1, 1).date()
    end = datetime(year, 12, 31).date()
    return start, end

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–æ–¥–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
def generate_yearly_chart(transactions_list):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞ –≥–æ–¥.
    transactions_list: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –≥–æ–¥.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.
    """
    from collections import defaultdict

    income_by_month = defaultdict(float)
    expense_by_month = defaultdict(float)

    for t in transactions_list:
        month_key = t.date.strftime('%m.%Y')  # –ù–∞–ø—Ä–∏–º–µ—Ä: '10.2025'
        if t.type == 'income':
            income_by_month[month_key] += float(t.amount)
        elif t.type == 'expense':
            expense_by_month[month_key] += float(t.amount)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—è—Ü—ã –ø–æ –¥–∞—Ç–µ
    all_months = sorted(set(income_by_month.keys()) | set(expense_by_month.keys()),
                        key=lambda x: datetime.strptime(x, '%m.%Y'))

    income_values = [income_by_month[m] for m in all_months]
    expense_values = [expense_by_month[m] for m in all_months]

    plt.figure(figsize=(12, 6))
    plt.plot(all_months, income_values, label='–î–æ—Ö–æ–¥—ã', marker='o')
    plt.plot(all_months, expense_values, label='–†–∞—Å—Ö–æ–¥—ã', marker='s')
    plt.title('–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞ –≥–æ–¥')
    plt.xlabel('–ú–µ—Å—è—Ü')
    plt.ylabel('–°—É–º–º–∞')
    plt.legend()
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.tight_layout()

    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format='png', dpi=150)
    img_buffer.seek(0)
    plt.close()
    return img_buffer

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è. –ë—É–¥–µ–º –µ–≥–æ –≤—ã–∑—ã–≤–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, —Ç—Ä–µ–±—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø.
async def check_consent_or_block(message_or_callback, state: FSMContext = None):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if isinstance(message_or_callback, types.Message):
        user_id = message_or_callback.from_user.id
        username = message_or_callback.from_user.username
    else:
        user_id = message_or_callback.from_user.id
        username = message_or_callback.from_user.username

    user = await get_or_create_django_user(user_id, username)
    has_consent = await is_consent_valid(user)

    if not has_consent:
        if isinstance(message_or_callback, types.Message):
            await message_or_callback.answer(
                "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ FinControl –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–î–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ...¬ª."
            )
        else:
            await message_or_callback.answer(
                "–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
                show_alert=True
            )
        if state:
            await state.clear()
        return False
    return True

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ ---
# –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ORM –≤ sync_to_async

@sync_to_async
def get_or_create_consent(user):
    consent, created = UserConsent.objects.get_or_create(user=user)
    return consent

@sync_to_async
def grant_consent(user):
    from django.utils import timezone
    consent = UserConsent.objects.get(user=user)
    consent.given_at = timezone.now()
    consent.revoked_at = None
    consent.save()

@sync_to_async
def revoke_consent(user):
    from django.utils import timezone
    print(f"[DEBUG] revoke_consent called for user: {user.username}")
    try:
        consent = UserConsent.objects.get(user=user)
        print(f"[DEBUG] Found consent: given_at={consent.given_at}, revoked_at={consent.revoked_at}")
        if consent.given_at is not None and consent.revoked_at is None:
            consent.revoked_at = timezone.now()
            consent.save()
            print(f"[DEBUG] Consent revoked at: {consent.revoked_at}")
            return True
        else:
            print("[DEBUG] No active consent to revoke")
            return False
    except UserConsent.DoesNotExist:
        print("[DEBUG] UserConsent does not exist")
        return False
    except Exception as e:
        print(f"[ERROR] Exception in revoke_consent: {e}")
        return False

@sync_to_async
def is_consent_valid(user):
    try:
        consent = UserConsent.objects.get(user=user)
        return consent.is_valid
    except UserConsent.DoesNotExist:
        return False

@sync_to_async
def get_expenses_for_user_and_period(user, start_date, end_date):
    #–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã (—Ç–æ–ª—å–∫–æ type='expense') –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç.
    return Transaction.objects.filter(
        user=user,
        type='expense', # –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã
        date__gte=start_date,
        date__lte=end_date
    )

@sync_to_async
def get_or_create_django_user(telegram_id: int, username: str = None):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç Django User, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å Telegram ID.
    –î–ª—è MVP –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å username, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å.
    –ï—Å–ª–∏ username –Ω–µ—Ç, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ telegram_id.
    """
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ —É–Ω–∏–∫–∞–ª–µ–Ω)
    if username:
        try:
            user = User.objects.get(username=username)
            # TODO: –°–≤—è–∑–∞—Ç—å telegram_id —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –µ—Å–ª–∏ —Å–≤—è–∑–∏ –Ω–µ—Ç
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã MVP, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ username —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –µ–≥–æ —Ö–≤–∞—Ç–∞–µ—Ç.
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –º–æ–¥–µ–ª—å Profile –∏–ª–∏ UserTelegramID.
            return user
        except User.DoesNotExist:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º username, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
            user_username = username or f"tg_user_{telegram_id}"
            user = User.objects.create_user(username=user_username)
            # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å telegram_id –≤ Profile –∏–ª–∏ UserTelegramID
            return user
    else:
        # –ï—Å–ª–∏ username –Ω–µ—Ç, –∏—â–µ–º –ø–æ telegram_id –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
        # –í MVP –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å–ª–æ–∂–Ω–æ. –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ username –∏–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è.
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ Telegram ID –≤ –ø—Ä–æ—Ñ–∏–ª–µ (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å Profile).
        # –î–ª—è MVP: —Å–æ–∑–¥–∞–¥–∏–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è.
        user_username = f"tg_user_{telegram_id}"
        try:
            user = User.objects.get(username=user_username)
            return user
        except User.DoesNotExist:
            user = User.objects.create_user(username=user_username)
            return user

@sync_to_async
def get_transactions_for_user_and_date(user, date):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É."""
    return Transaction.objects.filter(user=user, date=date)

@sync_to_async
def get_transactions_for_user_and_date_range(user, start_date, end_date):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç."""
    return Transaction.objects.filter(
        user=user,
        date__gte=start_date,
        date__lte=end_date
    )

@sync_to_async
def get_transactions_for_user_and_week(user, start_of_week, end_of_week):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –Ω–µ–¥–µ–ª—é."""
    return Transaction.objects.filter(
        user=user,
        date__gte=start_of_week,
        date__lte=end_of_week
    )

@sync_to_async
def get_transactions_for_user_and_category(user, category):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    return Transaction.objects.filter(user=user, category=category)

@sync_to_async
def get_category_by_name(name):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏."""
    return Category.objects.get(name=name)

# –§—É–Ω–∫—Ü–∏—è create_transaction
@sync_to_async
def create_transaction(user, amount, date, type, category_id, description):
    category = Category.objects.get(id=category_id)
    return Transaction.objects.create(
        user=user,
        amount=amount,
        date=date,
        type=type,
        category=category,
        description=description
    )

# --- –§—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ ---
# –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏, –Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–µ—Ä–µ–∑ sync_to_async



def generate_weekly_chart(transactions_list):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é.
    transactions_list: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Transaction –∑–∞ –Ω–µ–¥–µ–ª—é.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç.
    """
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ —Ç–∏–ø—É
    from collections import defaultdict
    income_by_day = defaultdict(float)
    expense_by_day = defaultdict(float)

    # –¢–µ–ø–µ—Ä—å –∏—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É, –∞ –Ω–µ –ø–æ QuerySet
    for t in transactions_list:
        date_str = t.date.strftime('%d.%m') # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        if t.type == 'income':
            income_by_day[date_str] += float(t.amount)
        elif t.type == 'expense':
            expense_by_day[date_str] += float(t.amount)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ
    all_dates = sorted(set(income_by_day.keys()) | set(expense_by_day.keys()))

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    income_values = [income_by_day[date] for date in all_dates]
    expense_values = [expense_by_day[date] for date in all_dates]

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(10, 6))
    plt.plot(all_dates, income_values, label='–î–æ—Ö–æ–¥—ã', marker='o')
    plt.plot(all_dates, expense_values, label='–†–∞—Å—Ö–æ–¥—ã', marker='s')
    plt.title('–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–°—É–º–º–∞')
    plt.legend()
    plt.grid(True)
    plt.xticks(rotation=45) # –ü–æ–≤–æ—Ä–æ—Ç –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–∏ X –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    plt.tight_layout() # –£–ª—É—á—à–∞–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format='png', dpi=150)
    img_buffer.seek(0) # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞
    plt.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å

    return img_buffer

def generate_monthly_chart(transactions_list):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü.
    transactions_list: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Transaction –∑–∞ –º–µ—Å—è—Ü.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –≥—Ä–∞—Ñ–∏–∫–∞.
    """
    from collections import defaultdict
    from datetime import datetime

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—é –º–µ—Å—è—Ü–∞ (1-31) –∏ —Ç–∏–ø—É
    income_by_day = defaultdict(float)
    expense_by_day = defaultdict(float)

    for t in transactions_list:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ (1-31) –∫–∞–∫ –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        day_key = t.date.strftime('%d.%m') # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ –¥–µ–Ω—å.–º–µ—Å—è—Ü –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
        if t.type == 'income':
            income_by_day[day_key] += float(t.amount)
        elif t.type == 'expense':
            expense_by_day[day_key] += float(t.amount)

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –¥–∞—Ç–µ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –º–µ—Å—è—Ü–∞)
    all_dates = sorted(set(income_by_day.keys()) | set(expense_by_day.keys()))

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    income_values = [income_by_day[date] for date in all_dates]
    expense_values = [expense_by_day[date] for date in all_dates]

    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(12, 6)) # –®–∏—Ä–µ –¥–ª—è –º–µ—Å—è—Ü–µ–≤
    plt.plot(all_dates, income_values, label='–î–æ—Ö–æ–¥—ã', marker='o', linestyle='-', linewidth=1)
    plt.plot(all_dates, expense_values, label='–†–∞—Å—Ö–æ–¥—ã', marker='s', linestyle='-', linewidth=1)
    plt.title('–î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–°—É–º–º–∞')
    plt.legend()
    plt.grid(True)
    plt.xticks(rotation=45) # –ü–æ–≤–æ—Ä–æ—Ç –ø–æ–¥–ø–∏—Å–µ–π –æ—Å–∏ X –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    plt.tight_layout() # –£–ª—É—á—à–∞–µ—Ç —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±–∞–π—Ç–æ–≤—ã–π –±—É—Ñ–µ—Ä
    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format='png', dpi=150)
    img_buffer.seek(0) # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞
    plt.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å

    return img_buffer

def generate_category_pie_chart(expenses_list):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
    expenses_list: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Transaction (—Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã.
    """
    from collections import defaultdict
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    expenses_by_category = defaultdict(float)

    for t in expenses_list:
        category_name = t.category.name
        expenses_by_category[category_name] += float(t.amount)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
    categories = list(expenses_by_category.keys())
    values = list(expenses_by_category.values())

    if not categories:
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–¥–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        plt.figure(figsize=(8, 8))
        plt.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è', horizontalalignment='center', verticalalignment='center', fontsize=14)
        plt.axis('off') # –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–∏
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        plt.figure(figsize=(8, 8))
        # autopct='%1.1f%%' –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã
        # startangle=140 –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É
        plt.pie(values, labels=categories, autopct='%1.1f%%', startangle=140)
        plt.title('–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –≤ –±–∞–π—Ç–æ–≤—ã–π –±—É—Ñ–µ—Ä
    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format='png', dpi=150)
    img_buffer.seek(0) # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞
    plt.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É, —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å

    return img_buffer

def generate_advice(transactions_list):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Å–æ–≤–µ—Ç –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
    transactions_list: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Transaction.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Å–æ–≤–µ—Ç–æ–º –∏–ª–∏ None, –µ—Å–ª–∏ —Å–æ–≤–µ—Ç –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º.
    """
    if not transactions_list:
        return None

    total_expense = sum(float(t.amount) for t in transactions_list if t.type == 'expense')
    total_income = sum(float(t.amount) for t in transactions_list if t.type == 'income')
    balance = total_income - total_expense

    advice_parts = []

    # –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ
    if balance < 0:
        advice_parts.append("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –í–∞—à –±–∞–ª–∞–Ω—Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π! –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤.")

    # –ü—Ä–∏–º–µ—Ä 2: –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    if total_expense > total_income * 0.8: # –ï—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥—ã > 80% –¥–æ—Ö–æ–¥–æ–≤
        advice_parts.append("üí° –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã. –û–Ω–∏ —Å–æ—Å—Ç–∞–≤–ª—è—é—Ç –±–æ–ª–µ–µ 80% –æ—Ç –¥–æ—Ö–æ–¥–æ–≤.")

    # –ü—Ä–∏–º–µ—Ä 3: –ù–∞–π—Ç–∏ —Å–∞–º—É—é "–¥–æ—Ä–æ–≥—É—é" –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤
    from collections import defaultdict
    expenses_by_category = defaultdict(float)
    for t in transactions_list:
        if t.type == 'expense':
            expenses_by_category[t.category.name] += float(t.amount)

    if expenses_by_category:
        most_expensive_category = max(expenses_by_category, key=expenses_by_category.get)
        most_expensive_amount = expenses_by_category[most_expensive_category]
        advice_parts.append(f"üìä –°–∞–º–∞—è –±–æ–ª—å—à–∞—è —Å—Ç–∞—Ç—å—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: '{most_expensive_category}' ({most_expensive_amount:.2f}).")

    # –ü—Ä–∏–º–µ—Ä 4: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–µ —Ç—Ä–∞—Ç—ã –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å
    daily_expenses = defaultdict(float)
    for t in transactions_list:
        if t.type == 'expense':
            day_key = t.date
            daily_expenses[day_key] += float(t.amount)

    if daily_expenses:
        max_daily_expense = max(daily_expenses.values())
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–Ω–µ–≤–Ω–∞—è —Ç—Ä–∞—Ç–∞ –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–π –¥–Ω–µ–≤–Ω–æ–π –≤ 3 —Ä–∞–∑–∞
        avg_daily_expense = sum(daily_expenses.values()) / len(daily_expenses) if daily_expenses else 0
        if avg_daily_expense > 0 and max_daily_expense > avg_daily_expense * 3:
            expensive_day = [day for day, amount in daily_expenses.items() if amount == max_daily_expense][0]
            advice_parts.append(f"‚ö†Ô∏è –ê–Ω–æ–º–∞–ª–∏—è: {expensive_day.strftime('%d.%m.%Y')} –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ {max_daily_expense:.2f}, —á—Ç–æ –Ω–∞–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞ ({avg_daily_expense:.2f}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ –±—ã–ª–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞.")

    if advice_parts:
        return "\n".join(advice_parts)
    else:
        return "–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ! –£ –≤–∞—Å –∑–¥–æ—Ä–æ–≤–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å."

    return None # –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å "–≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ", –ø—Ä–æ—Å—Ç–æ return ""


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–î–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ...¬ª
@dp.message(lambda msg: msg.text == "–î–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
async def send_consent_request(message: types.Message):
    user = await get_or_create_django_user(message.from_user.id, message.from_user.username)
    consent = await get_or_create_consent(user)
    if consent.is_valid:
        await message.answer("‚úÖ –í—ã —É–∂–µ –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
    pdf_path = os.path.join(settings.MEDIA_ROOT, 'consent', 'privacy_policy.pdf')
    if not os.path.exists(pdf_path):
        await message.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    await message.answer_document(
        document=types.FSInputFile(pdf_path),
        caption="üìÑ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ü–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
    )

    # –í–º–µ—Å—Ç–æ inline-–∫–Ω–æ–ø–∫–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
    await message.answer(
        "–ß—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
        "<code>–Ø –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</code>",
        parse_mode="HTML"
    )

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è
@dp.message(lambda msg: msg.text == "–Ø –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
async def handle_consent_grant(message: types.Message):
    user = await get_or_create_django_user(message.from_user.id, message.from_user.username)
    consent = await get_or_create_consent(user)
    if consent.is_valid:
        await message.answer("‚úÖ –°–æ–≥–ª–∞—Å–∏–µ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–æ!")
        return

    await grant_consent(user)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    main_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"), KeyboardButton(text="–û—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")],
            [KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "‚úÖ –°–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è FinControl.",
        reply_markup=main_keyboard
    )

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ FSM)
user_pending_revoke = set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–û—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ...¬ª
@dp.message(lambda msg: msg.text == "–û—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
async def revoke_consent_request(message: types.Message):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–≥–ª–∞—Å–∏—è
    if not await check_consent_or_block(message):
        return

    user_id = message.from_user.id
    user = await get_or_create_django_user(user_id, message.from_user.username)
    consent = await get_or_create_consent(user)

    if not consent.is_valid:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_pending_revoke.add(user_id)

    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    temp_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–∑—ã–≤ —Å–æ–≥–ª–∞—Å–∏—è")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö?\n"
        "‚ö†Ô∏è –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º FinControl.",
        reply_markup=temp_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ —Å–æ–≥–ª–∞—Å–∏—è
@dp.message(lambda msg: msg.text == "‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–∑—ã–≤ —Å–æ–≥–ª–∞—Å–∏—è")
async def handle_revoke_confirmation(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_pending_revoke:
        await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–∑—ã–≤ —Å–æ–≥–ª–∞—Å–∏—è.")
        return

    user_pending_revoke.discard(user_id)
    user = await get_or_create_django_user(user_id, message.from_user.username)

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
    await revoke_consent(user)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    main_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")],
            [KeyboardButton(text="–û—Ç–∑—ã–≤ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")],
            [KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "üõë –°–æ–≥–ª–∞—Å–∏–µ –æ—Ç–æ–∑–≤–∞–Ω–æ. –î–æ—Å—Ç—É–ø –∫ FinControl –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
        reply_markup=main_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–∑—ã–≤–∞ —Å–æ–≥–ª–∞—Å–∏—è
@dp.message(lambda msg: msg.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–∑—ã–≤")
async def handle_revoke_cancellation(message: types.Message):
    user_id = message.from_user.id
    user_pending_revoke.discard(user_id)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    main_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")],
            [KeyboardButton(text="–û—Ç–∑—ã–≤ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")],
            [KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")]
        ],
        resize_keyboard=True
    )

    await message.answer("‚úÖ –û—Ç–∑—ã–≤ —Å–æ–≥–ª–∞—Å–∏—è –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command(commands=['start']))
async def send_welcome(message: types.Message, state: FSMContext):
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–∏—è
    user = await get_or_create_django_user(message.from_user.id, message.from_user.username)
    has_consent = await is_consent_valid(user)

    # Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: —Ç–æ–ª—å–∫–æ —Å–æ–≥–ª–∞—Å–∏–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    button_consent = KeyboardButton(text="–î–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    button_unconsent = KeyboardButton(text="–û—Ç–æ–∑–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    button_finances = KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")

    reply_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [button_consent, button_unconsent],
            [button_finances]
        ],
        resize_keyboard=True,
        one_time_keyboard=False  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞—ë—Ç—Å—è –≤–∏–¥–∏–º–æ–π
    )

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–≥–ª–∞—Å–∏—è
    if has_consent:
        welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è FinControl. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ë–æ–ª—å—à–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –∫–æ–º–∞–Ω–¥–µ /help."
    else:
        welcome_text = "üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ FinControl –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."

    await message.answer(welcome_text, reply_markup=reply_keyboard)

    # Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if has_consent:
        inline_builder = InlineKeyboardBuilder()
        inline_builder.button(text="üìÜ –°—Ç–∞—Ç_–¥–µ–Ω—å", callback_data="stat:day")
        inline_builder.button(text="üìÖ –°—Ç–∞—Ç_–Ω–µ–¥–µ–ª—è", callback_data="stat:week")
        inline_builder.button(text="üìä –°—Ç–∞—Ç_–º–µ—Å—è—Ü", callback_data="stat:month")
        inline_builder.adjust(3)  # 3 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
            reply_markup=inline_builder.as_markup()  # —ç—Ç–æ inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ stat_month
@dp.callback_query(lambda c: c.data == "stat:month")
async def handle_stat_month(callback: CallbackQuery, state: FSMContext):
    if not await check_consent_or_block(callback, state):
        return
    await callback.answer()
    today = datetime.now().date()
    current_month = today.strftime("%m.%Y")
    first_day_this_month = today.replace(day=1)
    last_day_prev_month = first_day_this_month - timedelta(days=1)
    prev_month = last_day_prev_month.strftime("%m.%Y")

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data=f"graph_month:{current_month}")
    builder.button(text="‚¨ÖÔ∏è –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", callback_data=f"graph_month:{prev_month}")
    builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="graph_month:enter")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="stat:back_to_main")
    builder.adjust(1)

    await callback.message.edit_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –æ—Ç—á—ë—Ç–∞:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ stat_day
@dp.callback_query(lambda c: c.data == "stat:day")
async def handle_stat_day(callback: CallbackQuery, state: FSMContext):
    if not await check_consent_or_block(callback, state):
        return
    await callback.answer()
    today = datetime.now().date()
    yesterday = today - timedelta(days=1)

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –°–µ–≥–æ–¥–Ω—è", callback_data=f"graph_day:{today.strftime('%d.%m.%Y')}")
    builder.button(text="‚¨ÖÔ∏è –í—á–µ—Ä–∞", callback_data=f"graph_day:{yesterday.strftime('%d.%m.%Y')}")
    builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É", callback_data="graph_day:enter")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="stat:back_to_main")
    builder.adjust(1)

    await callback.message.edit_text(
        "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è –æ—Ç—á—ë—Ç–∞:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ stat_week
@dp.callback_query(lambda c: c.data == "stat:week")
async def handle_stat_week(callback: CallbackQuery, state: FSMContext):
    if not await check_consent_or_block(callback, state):
        return
    await callback.answer()
    today = datetime.now().date()
    # –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è (—Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞)
    start_this_week = today - timedelta(days=today.weekday())
    # –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è
    start_last_week = start_this_week - timedelta(weeks=1)
    end_last_week = start_last_week + timedelta(days=6)

    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚úÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è",
        callback_data=f"graph_week_range:{start_this_week.strftime('%d.%m.%Y')}:{today.strftime('%d.%m.%Y')}"
    )
    builder.button(
        text="‚¨ÖÔ∏è –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è",
        callback_data=f"graph_week_range:{start_last_week.strftime('%d.%m.%Y')}:{end_last_week.strftime('%d.%m.%Y')}"
    )
    builder.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–µ–¥–µ–ª—é", callback_data="graph_week:enter")
    builder.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="stat:back_to_main")
    builder.adjust(1)

    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –æ—Ç—á—ë—Ç–∞:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ main_stat_menu
@dp.callback_query(lambda c: c.data == "stat:back_to_main")
async def back_to_main_stat_menu(callback: CallbackQuery, state: FSMContext):
    if not await check_consent_or_block(callback, state):
        return
    await callback.answer()
    inline_builder = InlineKeyboardBuilder()
    inline_builder.button(text="üìÜ –°—Ç–∞—Ç_–¥–µ–Ω—å", callback_data="stat:day")
    inline_builder.button(text="üìÖ –°—Ç–∞—Ç_–Ω–µ–¥–µ–ª—è", callback_data="stat:week")
    inline_builder.button(text="üìä –°—Ç–∞—Ç_–º–µ—Å—è—Ü", callback_data="stat:month")
    inline_builder.adjust(3)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=inline_builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ Reply-–∫–Ω–æ–ø–∫—É ¬´–ó–∞–ø–∏—Å–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é¬ª
@dp.message(lambda msg: msg.text == "–ó–∞–ø–∏—Å–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
async def start_transaction_flow(message: types.Message, state: FSMContext):
    if not await check_consent_or_block(message, state):
        return
    # –°–æ–∑–¥–∞—ë–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–æ—Ö–æ–¥ üí∞", callback_data="txn_type:income")
    builder.button(text="–†–∞—Å—Ö–æ–¥ üí∏", callback_data="txn_type:expense")
    builder.adjust(2)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", reply_markup=builder.as_markup())
    await state.set_state(TransactionStates.waiting_for_type)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@dp.callback_query(lambda c: c.data.startswith("txn_type:"), TransactionStates.waiting_for_type)
async def process_type(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    txn_type = callback.data.split(":", 1)[1]
    await state.update_data(transaction_type=txn_type)
    await callback.message.edit_text(f"–¢–∏–ø –≤—ã–±—Ä–∞–Ω: {'–î–æ—Ö–æ–¥' if txn_type == 'income' else '–†–∞—Å—Ö–æ–¥'}")

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500.75):")
    await state.set_state(TransactionStates.waiting_for_amount)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@dp.message(TransactionStates.waiting_for_amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100 –∏–ª–∏ 499.99):")
        return

    await state.update_data(amount=amount)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>21.10.2025</code>):",
        parse_mode="HTML"
    )
    await state.set_state(TransactionStates.waiting_for_date)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@dp.message(TransactionStates.waiting_for_date)
async def process_date(message: types.Message, state: FSMContext):
    date_str = message.text.strip()
    try:
        parsed_date = datetime.strptime(date_str, '%d.%m.%Y').date()
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>15.03.2025</code>).",
            parse_mode="HTML"
        )
        return

    await state.update_data(date=parsed_date)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î
    categories = await sync_to_async(list)(Category.objects.all())
    if not categories:
        await message.answer("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await state.clear()
        return

    # –°–æ–∑–¥–∞—ë–º inline-–∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    builder = InlineKeyboardBuilder()
    for cat in categories:
        builder.button(text=cat.name, callback_data=f"txn_category:{cat.id}")
    builder.adjust(2)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup())
    await state.set_state(TransactionStates.waiting_for_category)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@dp.callback_query(lambda c: c.data.startswith("txn_category:"), TransactionStates.waiting_for_category)
async def process_category(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    category_id = int(callback.data.split(":", 1)[1])
    category = await sync_to_async(Category.objects.get)(id=category_id)
    await state.update_data(category_id=category.id, category_name=category.name)
    await callback.message.edit_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: {category.name}")

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):"
    )
    await state.set_state(TransactionStates.waiting_for_description)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@dp.message(TransactionStates.waiting_for_description)
async def process_description_and_save(message: types.Message, state: FSMContext):
    description = message.text.strip()
    if description in {".", "-", "‚Äî", ""}:
        description = ""

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    user = await get_or_create_django_user(message.from_user.id, message.from_user.username)

    try:
        # –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = await create_transaction(
            user=user,
            amount=data['amount'],
            date=data['date'],
            type=data['transaction_type'],
            category_id=data['category_id'],  # –ø–µ—Ä–µ–¥–∞—ë–º ID
            description=description
        )
        await message.answer(
            f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            f"–¢–∏–ø: {'–î–æ—Ö–æ–¥' if data['transaction_type'] == 'income' else '–†–∞—Å—Ö–æ–¥'}\n"
            f"–°—É–º–º–∞: {data['amount']:.2f}\n"
            f"–î–∞—Ç–∞: {data['date'].strftime('%d.%m.%Y')}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category_name']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description or '‚Äî'}"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

    await state.clear()

# === –î–ï–ù–¨ === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–Ω—è
@dp.callback_query(lambda c: c.data == "graph_day:enter")
async def request_day_input(callback: CallbackQuery, state: FSMContext):
    if not await check_consent_or_block(callback, state):
        return
    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>21.10.2025</code>):",
        parse_mode="HTML"
    )
    await state.set_state(DayInput.waiting_for_day)


@dp.message(DayInput.waiting_for_day)
async def process_day_input(message: types.Message, state: FSMContext):
    if not await check_consent_or_block(message, state):
        return
    date_str = message.text.strip()
    try:
        target_date = parse_day(date_str)
    except Exception:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>15.03.2025</code>).",
            parse_mode="HTML"
        )
        return

    user = await get_or_create_django_user(message.from_user.id, message.from_user.username)
    transactions = await get_transactions_for_user_and_date(user, target_date)
    transactions_list = await sync_to_async(list)(transactions)

    if not transactions_list:
        await message.answer(f"üì≠ –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ {target_date.strftime('%d.%m.%Y')}.")
    else:
        expenses = [t for t in transactions_list if t.type == 'expense']
        chart_buffer = await sync_to_async(generate_category_pie_chart)(expenses or [])
        await message.answer_photo(
            photo=types.BufferedInputFile(chart_buffer.read(), filename=f"day_{target_date}.png"),
            caption=f"üìä –û—Ç—á—ë—Ç –∑–∞ {target_date.strftime('%d.%m.%Y')}"
        )
        advice = await sync_to_async(generate_advice)(transactions_list)
        if advice:
            await message.answer(advice)

    await state.clear()


# === –ù–ï–î–ï–õ–Ø === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–µ–¥–µ–ª–∏
@dp.callback_query(lambda c: c.data == "graph_week:enter")
async def request_week_input(callback: CallbackQuery, state: FSMContext):
    if not await check_consent_or_block(callback, state):
        return
    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É <b>–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞</b> –Ω–µ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>21.10.2025</code> ‚Äî –Ω–µ–¥–µ–ª—è —Å 21 –ø–æ 27 –æ–∫—Ç—è–±—Ä—è)",
        parse_mode="HTML"
    )
    await state.set_state(WeekInput.waiting_for_week_start)


@dp.message(WeekInput.waiting_for_week_start)
async def process_week_input(message: types.Message, state: FSMContext):
    if not await check_consent_or_block(message, state):
        return
    date_str = message.text.strip()
    try:
        start_date = parse_day(date_str)
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —ç—Ç–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        if start_date.weekday() != 0:
            await message.answer(
                "‚ö†Ô∏è –£–∫–∞–∑–∞–Ω –Ω–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫. –ù–µ–¥–µ–ª—è –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21.10.2025)."
            )
            return
        end_date = start_date + timedelta(days=6)
    except Exception:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ –∫–∞–∫ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>.",
            parse_mode="HTML"
        )
        return

    user = await get_or_create_django_user(message.from_user.id, message.from_user.username)
    transactions = await get_transactions_for_user_and_date_range(user, start_date, end_date)
    transactions_list = await sync_to_async(list)(transactions)

    if not transactions_list:
        await message.answer(f"üì≠ –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}.")
    else:
        chart_buffer = await sync_to_async(generate_weekly_chart)(transactions_list)
        await message.answer_photo(
            photo=types.BufferedInputFile(chart_buffer.read(), filename=f"week_{start_date}.png"),
            caption=f"üìà –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é\n{start_date.strftime('%d.%m.%Y')} ‚Äì {end_date.strftime('%d.%m.%Y')}"
        )
        advice = await sync_to_async(generate_advice)(transactions_list)
        if advice:
            await message.answer(advice)

    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ send_today_stats
@dp.message(Command(commands=['today']))
async def send_today_stats(message: types.Message, state: FSMContext):
    if not await check_consent_or_block(message, state):
        return
    user = await get_or_create_django_user(message.from_user.id, message.from_user.username)
    today = datetime.now().date()
    transactions = await get_transactions_for_user_and_date(user, today)

    total_expense = await sync_to_async(
        lambda: transactions.filter(type='expense').aggregate(Sum('amount'))['amount__sum'] or 0
    )()
    total_income = await sync_to_async(
        lambda: transactions.filter(type='income').aggregate(Sum('amount'))['amount__sum'] or 0
    )()

    response_text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):\n"
    response_text += f"–î–æ—Ö–æ–¥—ã: {total_income:.2f}\n"
    response_text += f"–†–∞—Å—Ö–æ–¥—ã: {total_expense:.2f}\n"
    response_text += f"–ë–∞–ª–∞–Ω—Å: {total_income - total_expense:.2f}"

    await message.reply(response_text)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
@dp.message(Command(commands=['week']))
async def send_week_stats(message: types.Message, state: FSMContext):
    if not await check_consent_or_block(message, state):
        return
    user = await get_or_create_django_user(message.from_user.id, message.from_user.username)
    today = datetime.now().date()
    # –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    start_of_week = today - timedelta(days=today.weekday())
    # –ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å–µ–≥–æ–¥–Ω—è)
    end_of_week = today

    transactions = await get_transactions_for_user_and_week(user, start_of_week, end_of_week)

    total_expense = await sync_to_async(
        lambda: transactions.filter(type='expense').aggregate(Sum('amount'))['amount__sum'] or 0
    )()
    total_income = await sync_to_async(
        lambda: transactions.filter(type='income').aggregate(Sum('amount'))['amount__sum'] or 0
    )()

    response_text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é ({start_of_week.strftime('%d.%m.%Y')} - {end_of_week.strftime('%d.%m.%Y')}):\n"
    response_text += f"–î–æ—Ö–æ–¥—ã: {total_income:.2f}\n"
    response_text += f"–†–∞—Å—Ö–æ–¥—ã: {total_expense:.2f}\n"
    response_text += f"–ë–∞–ª–∞–Ω—Å: {total_income - total_expense:.2f}"

    await message.reply(response_text)

# –î–ª—è –≤—ã–∑–æ–≤–∞ –≤ send_week_stats
@sync_to_async
def get_transactions_for_user_and_week(user, start_of_week, end_of_week):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –Ω–µ–¥–µ–ª—é."""
    return Transaction.objects.filter(
        user=user,
        date__gte=start_of_week,
        date__lte=end_of_week
    )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(Command(commands=['category']))
async def send_category_stats(message: types.Message, state: FSMContext):
    if not await check_consent_or_block(message, state):
        return
    # –ö–æ–º–∞–Ω–¥–∞ /category food
    command_args = message.text.split(maxsplit=1)
    if len(command_args) < 2:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –ü—Ä–∏–º–µ—Ä: /category –µ–¥–∞")
        return

    category_name = command_args[1].strip().capitalize() # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    user = await get_or_create_django_user(message.from_user.id, message.from_user.username)

    try:
        category = await get_category_by_name(category_name)
    except Category.DoesNotExist:
        await message.reply(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ)
    # –ü–æ–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    transactions = await get_transactions_for_user_and_category(user, category)

    total_expense = await sync_to_async(
        lambda: transactions.filter(type='expense').aggregate(Sum('amount'))['amount__sum'] or 0
    )()
    total_income = await sync_to_async(
        lambda: transactions.filter(type='income').aggregate(Sum('amount'))['amount__sum'] or 0
    )()

    response_text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':\n"
    response_text += f"–î–æ—Ö–æ–¥—ã: {total_income:.2f}\n"
    response_text += f"–†–∞—Å—Ö–æ–¥—ã: {total_expense:.2f}\n"
    response_text += f"–ë–∞–ª–∞–Ω—Å: {total_income - total_expense:.2f}"

    await message.reply(response_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç_–º–µ—Å—è—Ü"
@dp.message(lambda msg: msg.text == "–°—Ç–∞—Ç_–º–µ—Å—è—Ü")
async def stat_month_menu(message: types.Message):
    today = datetime.now().date()
    current_month = today.strftime("%m.%Y")
    first_day_this_month = today.replace(day=1)
    last_day_prev_month = first_day_this_month - timedelta(days=1)
    prev_month = last_day_prev_month.strftime("%m.%Y")

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", callback_data=f"graph_month:{current_month}")
    builder.button(text="‚¨ÖÔ∏è –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", callback_data=f"graph_month:{prev_month}")
    builder.button(text="üìÖ –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="graph_month:enter")
    builder.adjust(1)

    await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è ¬´–≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é¬ª
@dp.callback_query(lambda c: c.data == "graph_month:enter")
async def request_month_input(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>10.2025</code>):",
        parse_mode="HTML"
    )
    await state.set_state(MonthInput.waiting_for_month)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
@dp.callback_query(lambda c: c.data.startswith("graph_month:") and c.data != "graph_month:enter")
async def handle_predefined_month(callback: CallbackQuery):
    await callback.answer()
    month_str = callback.data.split(":", 1)[1]
    try:
        start_date, end_date = parse_month(month_str)
    except Exception:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞.")
        return

    user = await get_or_create_django_user(callback.from_user.id, callback.from_user.username)
    transactions = await get_transactions_for_user_and_date_range(user, start_date, end_date)
    transactions_list = await sync_to_async(list)(transactions)

    if not transactions_list:
        await callback.message.answer(f"üì≠ –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ {month_str}.")
        return

    chart_buffer = await sync_to_async(generate_monthly_chart)(transactions_list)
    await callback.message.answer_photo(
        photo=types.BufferedInputFile(chart_buffer.read(), filename=f"month_{month_str}.png"),
        caption=f"üìà –û—Ç—á—ë—Ç –∑–∞ {month_str}"
    )

    advice = await sync_to_async(generate_advice)(transactions_list)
    if advice:
        await callback.message.answer(advice)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –º–µ—Å—è—Ü–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@dp.message(MonthInput.waiting_for_month)
async def process_month_input(message: types.Message, state: FSMContext):
    month_str = message.text.strip()
    try:
        start_date, end_date = parse_month(month_str)
    except Exception:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –∫–∞–∫ <b>–ú–ú.–ì–ì–ì–ì</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>03.2025</code>).",
            parse_mode="HTML"
        )
        return  # –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äî –∂–¥—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥

    user = await get_or_create_django_user(message.from_user.id, message.from_user.username)
    transactions = await get_transactions_for_user_and_date_range(user, start_date, end_date)
    transactions_list = await sync_to_async(list)(transactions)

    if not transactions_list:
        await message.answer(f"üì≠ –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ {month_str}.")
    else:
        chart_buffer = await sync_to_async(generate_monthly_chart)(transactions_list)
        await message.answer_photo(
            photo=types.BufferedInputFile(chart_buffer.read(), filename=f"month_{month_str}.png"),
            caption=f"üìà –û—Ç—á—ë—Ç –∑–∞ {month_str}"
        )
        advice = await sync_to_async(generate_advice)(transactions_list)
        if advice:
            await message.answer(advice)

    await state.clear()  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

# –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
@dp.message(Command(commands=['add']))
async def add_transaction(message: types.Message, state: FSMContext):
    if not await check_consent_or_block(message, state):
        return
    # –ö–æ–º–∞–Ω–¥–∞ /add expense 500 21.10.2025 –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –û–±–µ–¥ –≤ McDonald's
    command_args = message.text.split(maxsplit=5) # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –º–∞–∫—Å–∏–º—É–º 6 —á–∞—Å—Ç–µ–π
    if len(command_args) < 6:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /add expense 500 21.10.2025 –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ü–æ–µ–∑–¥–∫–∞ –Ω–∞ –æ–±–µ–¥")
        return

    transaction_type = command_args[1].lower()
    try:
        amount = float(command_args[2])
    except ValueError:
        await message.reply("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    date_str = command_args[3]  # –ù–æ–≤–∞—è —á–∞—Å—Ç—å - —Å—Ç—Ä–æ–∫–∞ –¥–∞—Ç—ã
    category_name = command_args[4].capitalize() # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    description = command_args[5] if len(command_args) > 5 else "" # –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_or_create_django_user(message.from_user.id, message.from_user.username)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    if transaction_type not in ['income', 'expense']:
        await message.reply("–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'income' –∏–ª–∏ 'expense'.")
        return

    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã DD.MM.YYYY
        parsed_date = datetime.strptime(date_str, '%d.%m.%Y').date()
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21.10.2025).")
        return

    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    try:
        category = await get_category_by_name(category_name)
    except Category.DoesNotExist:
        await message.reply(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    try:
        await create_transaction(
            user=user,
            amount=amount,
            date=parsed_date, # <-- –ü–µ—Ä–µ–¥–∞—ë–º parsed_date –≤–º–µ—Å—Ç–æ datetime.now().date()
            type=transaction_type,
            category=category,
            description=description
        )
        await message.reply(
            f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è '{transaction_type} {amount} {parsed_date.strftime('%d.%m.%Y')} {category.name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")

# –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é
@dp.message(Command(commands=['graph_week']))
async def send_weekly_graph(message: types.Message, state: FSMContext):
    if not await check_consent_or_block(message, state):
        return

    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é.
    """
    user = await get_or_create_django_user(message.from_user.id, message.from_user.username)
    today = datetime.now().date()
    # –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    start_of_week = today - timedelta(days=today.weekday())
    # –ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å–µ–≥–æ–¥–Ω—è)
    end_of_week = today

    # –ü–æ–ª—É—á–∞–µ–º QuerySet –∏ *–≤—ã–ø–æ–ª–Ω—è–µ–º* –µ–≥–æ —Å –ø–æ–º–æ—â—å—é sync_to_async
    transactions_queryset = await get_transactions_for_user_and_week(user, start_of_week, end_of_week)
    # –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤, –≤—ã–ø–æ–ª–Ω–∏–≤ –∑–∞–ø—Ä–æ—Å
    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º .list() –≤ sync_to_async
    transactions_list = await sync_to_async(list)(transactions_queryset)

    if not transactions_list: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞, –∞ –Ω–µ QuerySet
        await message.reply("–ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    # –ü–µ—Ä–µ–¥–∞—ë–º *—Å–ø–∏—Å–æ–∫* –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—ã–∑–æ–≤ generate_weekly_chart –≤ sync_to_async
    chart_buffer = await sync_to_async(generate_weekly_chart)(transactions_list)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await message.answer_photo(photo=types.BufferedInputFile(chart_buffer.read(), filename="weekly_chart.png"))

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç
    advice_text = await sync_to_async(generate_advice)(transactions_list)
    if advice_text:
        await message.answer(advice_text)

@dp.message(Command(commands=['graph_month']))
async def send_monthly_graph(message: types.Message, state: FSMContext):
    if not await check_consent_or_block(message, state):
        return
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤/—Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.
    """
    user = await get_or_create_django_user(message.from_user.id, message.from_user.username)
    today = datetime.now().date()
    # –ù–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
    start_of_month = today.replace(day=1)
    # –ö–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞ - —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è
    end_of_month = today

    # –ü–æ–ª—É—á–∞–µ–º QuerySet –∏ *–≤—ã–ø–æ–ª–Ω—è–µ–º* –µ–≥–æ
    transactions_queryset = await get_transactions_for_user_and_date_range(user, start_of_month, end_of_month)
    transactions_list = await sync_to_async(list)(transactions_queryset)

    if not transactions_list: # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞
        await message.reply("–ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    # –ü–µ—Ä–µ–¥–∞—ë–º *—Å–ø–∏—Å–æ–∫* –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    chart_buffer = await sync_to_async(generate_monthly_chart)(transactions_list)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await message.answer_photo(photo=types.BufferedInputFile(chart_buffer.read(), filename="monthly_chart.png"))

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç
    advice_text = await sync_to_async(generate_advice)(transactions_list)
    if advice_text:
        await message.answer(advice_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –º–µ—Å—è—Ü–µ–≤
@dp.callback_query(lambda c: c.data.startswith("graph_month:"))
async def handle_month_selection(callback: CallbackQuery):
    await callback.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ

    data = callback.data
    user = await get_or_create_django_user(callback.from_user.id, callback.from_user.username)

    if data == "graph_month:custom":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.2025):")
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–æ –±–µ–∑ FSM ‚Äî –ø—Ä–æ—Å—Ç–æ –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤–≤–æ–¥ –º–µ—Å—è—Ü–∞
        # ‚Üí —Ä–µ–∞–ª–∏–∑—É–µ–º —ç—Ç–æ —á–µ—Ä–µ–∑ —Ñ–ª–∞–≥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Ç–µ–∫—Å—Ç–∞
        # –ù–æ —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –Ω–µ—Ç FSM, —Å–¥–µ–ª–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ—Å—Ç—ã–ª—å: –∑–∞–ø–æ–º–Ω–∏–º, —á—Ç–æ –∂–¥—ë–º –º–µ—Å—è—Ü
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ FSM (aiogram.fsm), –Ω–æ –¥–ª—è MVP ‚Äî —Ç–∞–∫:
        # –ú—ã —Å–æ–∑–¥–∞–¥–∏–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å (–Ω–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!) –∏–ª–∏ –ª—É—á—à–µ ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        # –û–¥–Ω–∞–∫–æ: –ø—Ä–æ—â–µ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É-–∑–∞–≥–ª—É—à–∫—É. –ù–æ –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî —á–µ—Ä–µ–∑ FSM.

        # ‚ö†Ô∏è –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï –ë–ï–ó FSM:
        # –ú—ã –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
        await callback.message.answer(
            "–ü–æ–∫–∞ —á—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é:\n"
            "<code>/graph_month_full 10.2025</code>",
            parse_mode="HTML"
        )
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—è—Ü.–ì–ì–ì–ì
    month_str = data.split(":", 1)[1]
    try:
        start_date, end_date = parse_month(month_str)
    except Exception:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞.")
        return

    transactions = await get_transactions_for_user_and_date_range(user, start_date, end_date)
    transactions_list = await sync_to_async(list)(transactions)

    if not transactions_list:
        await callback.message.answer(f"–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ {month_str}.")
        return

    chart_buffer = await sync_to_async(generate_monthly_chart)(transactions_list)
    await callback.message.answer_photo(
        photo=types.BufferedInputFile(chart_buffer.read(), filename=f"month_{month_str}.png"),
        caption=f"üìà –ì—Ä–∞—Ñ–∏–∫ –∑–∞ {month_str}"
    )

    advice = await sync_to_async(generate_advice)(transactions_list)
    if advice:
        await callback.message.answer(advice)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ predefined_day
@dp.callback_query(lambda c: c.data.startswith("graph_day:") and c.data != "graph_day:enter")
async def handle_predefined_day(callback: CallbackQuery):
    await callback.answer()
    date_str = callback.data.split(":", 1)[1]
    try:
        target_date = parse_day(date_str)
    except Exception:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")
        return

    user = await get_or_create_django_user(callback.from_user.id, callback.from_user.username)
    transactions = await get_transactions_for_user_and_date(user, target_date)
    transactions_list = await sync_to_async(list)(transactions)

    if not transactions_list:
        await callback.message.answer(f"üì≠ –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ {target_date.strftime('%d.%m.%Y')}.")
        return

    expenses = [t for t in transactions_list if t.type == 'expense']
    chart_buffer = await sync_to_async(generate_category_pie_chart)(expenses or [])
    await callback.message.answer_photo(
        photo=types.BufferedInputFile(chart_buffer.read(), filename=f"day_{target_date}.png"),
        caption=f"üìä –û—Ç—á—ë—Ç –∑–∞ {target_date.strftime('%d.%m.%Y')}"
    )
    advice = await sync_to_async(generate_advice)(transactions_list)
    if advice:
        await callback.message.answer(advice)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ predefined_week
@dp.callback_query(lambda c: c.data.startswith("graph_week_range:"))
async def handle_predefined_week(callback: CallbackQuery):
    await callback.answer()
    parts = callback.data.split(":")
    if len(parts) != 3:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ–¥–µ–ª–∏.")
        return

    try:
        start_date = parse_day(parts[1])
        end_date = parse_day(parts[2])
    except Exception:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")
        return

    user = await get_or_create_django_user(callback.from_user.id, callback.from_user.username)
    transactions = await get_transactions_for_user_and_date_range(user, start_date, end_date)
    transactions_list = await sync_to_async(list)(transactions)

    if not transactions_list:
        await callback.message.answer(
            f"üì≠ –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –Ω–µ–¥–µ–ª—é —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}."
        )
        return

    chart_buffer = await sync_to_async(generate_weekly_chart)(transactions_list)
    await callback.message.answer_photo(
        photo=types.BufferedInputFile(chart_buffer.read(), filename=f"week_{start_date}.png"),
        caption=f"üìà –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é\n{start_date.strftime('%d.%m.%Y')} ‚Äì {end_date.strftime('%d.%m.%Y')}"
    )
    advice = await sync_to_async(generate_advice)(transactions_list)
    if advice:
        await callback.message.answer(advice)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ ...
@dp.message(Command(commands=['graph_day']))
async def send_daily_graph(message: types.Message, state: FSMContext):
    if not await check_consent_or_block(message, state):
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –ü—Ä–∏–º–µ—Ä: /graph_day 21.10.2025")
        return

    date_str = parts[1].strip()
    try:
        target_date = parse_day(date_str)
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 21.10.2025).")
        return

    user = await get_or_create_django_user(message.from_user.id, message.from_user.username)
    transactions = await get_transactions_for_user_and_date(user, target_date)
    transactions_list = await sync_to_async(list)(transactions)

    if not transactions_list:
        await message.reply(f"–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ {target_date.strftime('%d.%m.%Y')}.")
        return

    # –î–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã)
    expenses_only = [t for t in transactions_list if t.type == 'expense']
    if expenses_only:
        chart_buffer = await sync_to_async(generate_category_pie_chart)(expenses_only)
        caption = f"–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ {target_date.strftime('%d.%m.%Y')}"
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        chart_buffer = await sync_to_async(generate_category_pie_chart)([])
        caption = f"–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {target_date.strftime('%d.%m.%Y')}"

    await message.answer_photo(
        photo=types.BufferedInputFile(chart_buffer.read(), filename=f"day_{target_date}.png"),
        caption=caption
    )

    # –°–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –¥–µ–Ω—å
    advice = await sync_to_async(generate_advice)(transactions_list)
    if advice:
        await message.answer(advice)


@dp.message(Command(commands=['graph_month_full']))
async def send_monthly_graph_custom(message: types.Message, state: FSMContext):
    if not await check_consent_or_block(message, state):
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–ì–ì–ì–ì. –ü—Ä–∏–º–µ—Ä: /graph_month_full 10.2025")
        return

    month_str = parts[1].strip()
    try:
        start_date, end_date = parse_month(month_str)
    except Exception as e:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.2025).")
        return

    user = await get_or_create_django_user(message.from_user.id, message.from_user.username)
    transactions = await get_transactions_for_user_and_date_range(user, start_date, end_date)
    transactions_list = await sync_to_async(list)(transactions)

    if not transactions_list:
        await message.reply(f"–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ {month_str}.")
        return

    chart_buffer = await sync_to_async(generate_monthly_chart)(transactions_list)
    await message.answer_photo(
        photo=types.BufferedInputFile(chart_buffer.read(), filename=f"month_{month_str}.png"),
        caption=f"–ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ {month_str}"
    )

    advice = await sync_to_async(generate_advice)(transactions_list)
    if advice:
        await message.answer(advice)


@dp.message(Command(commands=['graph_year']))
async def send_yearly_graph(message: types.Message, state: FSMContext):
    if not await check_consent_or_block(message, state):
        return
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –≥–æ–¥. –ü—Ä–∏–º–µ—Ä: /graph_year 2025")
        return

    year_str = parts[1].strip()
    try:
        start_date, end_date = parse_year(year_str)
    except Exception:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025).")
        return

    user = await get_or_create_django_user(message.from_user.id, message.from_user.username)
    transactions = await get_transactions_for_user_and_date_range(user, start_date, end_date)
    transactions_list = await sync_to_async(list)(transactions)

    if not transactions_list:
        await message.reply(f"–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ {year_str} –≥–æ–¥.")
        return

    chart_buffer = await sync_to_async(generate_yearly_chart)(transactions_list)
    await message.answer_photo(
        photo=types.BufferedInputFile(chart_buffer.read(), filename=f"year_{year_str}.png"),
        caption=f"–ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞ {year_str} –≥–æ–¥"
    )

    advice = await sync_to_async(generate_advice)(transactions_list)
    if advice:
        await message.answer(advice)

@dp.message(Command(commands=['chart_categories']))
async def send_category_chart(message: types.Message, state: FSMContext):
    if not await check_consent_or_block(message, state):
        return
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (week/month).
    """
    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —á–∞—Å—Ç–∏
    parts = message.text.split(maxsplit=1) # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ /chart_categories –∏ –ø–µ—Ä–∏–æ–¥
    period = parts[1].lower() if len(parts) > 1 else 'week' # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –Ω–µ–¥–µ–ª—è

    user = await get_or_create_django_user(message.from_user.id, message.from_user.username)
    today = datetime.now().date()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –ø–µ—Ä–∏–æ–¥–∞
    if period == 'week':
        start_date = today - timedelta(days=today.weekday()) # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–µ–¥–µ–ª–∏
        end_date = today
        period_name = "–∑–∞ –Ω–µ–¥–µ–ª—é"
    elif period == 'month':
        start_date = today.replace(day=1) # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
        end_date = today
        period_name = "—Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞"
    else:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'week' –∏–ª–∏ 'month'. –ü—Ä–∏–º–µ—Ä: /chart_categories week")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
    expenses_queryset = await get_expenses_for_user_and_period(user, start_date, end_date)
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    expenses_list = await sync_to_async(list)(expenses_queryset)

    if not expenses_list:
        await message.reply(f"–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ {period_name} –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É
    chart_buffer = await sync_to_async(generate_category_pie_chart)(expenses_list)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await message.answer_photo(
        photo=types.BufferedInputFile(chart_buffer.read(), filename=f"category_chart_{period}.png"),
        caption=f"–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º {period_name} ({start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')})"
    )

    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
    all_transactions_queryset = await get_transactions_for_user_and_date_range(user, start_date, end_date)
    all_transactions_list = await sync_to_async(list)(all_transactions_queryset)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    advice_text = await sync_to_async(generate_advice)(all_transactions_list) # <-- –ü–µ—Ä–µ–¥–∞—ë–º all_transactions_list
    if advice_text:
        await message.answer(advice_text)

@dp.message(Command(commands=['help']))
async def send_help(message: types.Message, state: FSMContext):
    if not await check_consent_or_block(message, state):
        return
    await message.reply(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/today - —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/week - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "/category <–Ω–∞–∑–≤–∞–Ω–∏–µ> - —Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        "/add <type> <amount> <date> <category> <description> - –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
        "üìà –ì—Ä–∞—Ñ–∏–∫–∏:\n"
        "/graph_week - –≥—Ä–∞—Ñ–∏–∫ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é\n"
        "/graph_month - –≥—Ä–∞—Ñ–∏–∫ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü\n"
        "/graph_day –î–î.–ú–ú.–ì–ì–ì–ì - –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å\n"
        "/graph_month_full –ú–ú.–ì–ì–ì–ì - –≥—Ä–∞—Ñ–∏–∫ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü\n"
        "/graph_year –ì–ì–ì–ì - –≥—Ä–∞—Ñ–∏–∫ –∑–∞ —Ü–µ–ª—ã–π –≥–æ–¥\n\n"
        "üìä –î–∏–∞–≥—Ä–∞–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        "/chart_categories week - –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é\n"
        "/chart_categories month - —Å –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞\n"
        "/help - —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    dp.run_polling(bot)
